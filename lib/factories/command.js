// Generated by CoffeeScript 1.10.0
var slice = [].slice;

module.exports.fragments_commandPrefix = function() {
  return 'command_';
};

module.exports.fragments_getCommandNames = function(fragments_helfer, fragments_commandPrefix, fragments_source) {
  return function() {
    var keys;
    keys = (typeof fragments_source.keys === "function" ? fragments_source.keys() : void 0) || [];
    return keys.filter(function(x) {
      return x.indexOf(fragments_commandPrefix) === 0;
    }).map(function(x) {
      return x.slice(fragments_commandPrefix.length);
    }).map(fragments_helfer.camelSnakeToHyphenColon);
  };
};

module.exports.fragments_commandNameToKey = function(fragments_helfer, fragments_commandPrefix) {
  return function(name) {
    return fragments_commandPrefix + fragments_helfer.hyphenColonToCamelSnake(name);
  };
};

module.exports.fragments_getCommand = function(fragments_Promise, fragments_hinoki, fragments_commandNameToKey, fragments_source, fragments_applicationLifetime) {
  return function(commandName) {
    var commandFactory, commandKey;
    commandKey = fragments_commandNameToKey(commandName.toLowerCase());
    commandFactory = fragments_source(commandKey);
    if (commandFactory == null) {
      return;
    }
    return function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return fragments_hinoki(fragments_source, fragments_applicationLifetime, commandKey).then(function(commandInstance) {
        return commandInstance.apply(null, args);
      });
    };
  };
};

module.exports.fragments_runCommand = function(fragments_getCommand, fragments_source) {
  return function() {
    var args, command, commandName;
    commandName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (commandName == null) {
      commandName = 'help';
    }
    command = fragments_getCommand(commandName);
    if (command != null) {
      return command.apply(null, args);
    } else {
      throw new Error("no such command: " + commandName);
    }
  };
};

module.exports.fragments_getCommandHelpLines = function(fragments_getCommandNames, fragments_commandNameToKey, fragments_isjs, fragments_lodash, fragments_source) {
  return function() {
    var _, args, commandNames, prefix;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    _ = fragments_lodash;
    commandNames = fragments_getCommandNames();
    if (args.length !== 0) {
      prefix = args.join(':');
      commandNames = _.filter(commandNames, function(name) {
        return fragments_isjs.startWith(name, prefix);
      });
    }
    commandNames = _.sortBy(commandNames);
    return commandNames.map(function(name) {
      var docstring, factory, key, line;
      key = fragments_commandNameToKey(name);
      line = name;
      factory = fragments_source(key);
      docstring = factory.__help;
      if (docstring != null) {
        line += ' ' + docstring;
      }
      return line;
    });
  };
};

module.exports.command_help = function(fragments_getCommandHelpLines) {
  return function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return fragments_getCommandHelpLines.apply(null, args).forEach(function(line) {
      return console.log(line);
    });
  };
};

module.exports.command_help.__help = '[namespace-prefixes...] display available commands';

module.exports.command_serve = function(fragments_APPLICATION) {
  return function(serverCallbackName) {
    var factory;
    if (serverCallbackName == null) {
      serverCallbackName = 'server';
    }
    factory = function(fragments_Promise, fragments_http, fragments_onShutdown, fragments_shutdownBefore, fragments_console, fragments_config_port, fragments_config_baseUrl, serverCallback) {
      return new fragments_Promise(function(resolve, reject) {
        var server;
        server = fragments_http.createServer(serverCallback);
        server.on('listening', function() {
          fragments_onShutdown('server', function() {
            fragments_console.log('shutting down server by calling server.close()');
            return fragments_Promise.promisify(server.close, server)();
          });
          fragments_shutdownBefore('postgres', 'server');
          fragments_shutdownBefore('redis', 'server');
          fragments_console.log("go visit " + fragments_config_baseUrl);
          fragments_console.log('OK');
          return resolve();
        });
        server.on('error', reject);
        return server.listen(fragments_config_port);
      });
    };
    factory.__inject = ['fragments_Promise', 'fragments_http', 'fragments_onShutdown', 'fragments_shutdownBefore', 'fragments_console', 'fragments_config_port', 'fragments_config_baseUrl', serverCallbackName];
    return fragments_APPLICATION(factory);
  };
};

module.exports.command_serve.__help = "[server-callback-name (default: 'server')] - start a server with `server-callback-name` as callback";
