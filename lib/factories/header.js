// Generated by CoffeeScript 1.10.0
var COMMON_REQUEST_HEADERS, COMMON_RESPONSE_HEADERS, QUICK_CONTENT_TYPES, contentType, fn, fn1, fn2, header, identifier,
  hasProp = {}.hasOwnProperty;

COMMON_REQUEST_HEADERS = require('../common-request-headers');

COMMON_RESPONSE_HEADERS = require('../common-response-headers');

module.exports.fragments_getHeader = function(fragments_req) {
  return function(name) {
    return fragments_req.headers[name.toLowerCase()] || null;
  };
};

fn = function(identifier, header) {
  var lowerCaseHeader;
  lowerCaseHeader = header.toLowerCase();
  return module.exports["fragments_header" + identifier] = function(fragments_req) {
    return fragments_req.headers[lowerCaseHeader] || null;
  };
};
for (identifier in COMMON_REQUEST_HEADERS) {
  header = COMMON_REQUEST_HEADERS[identifier];
  fn(identifier, header);
}

module.exports.fragments_setHeader = function(fragments_res) {
  return function(key, value) {
    if (!((key != null) && (value != null))) {
      throw new Error('needs exactly two arguments');
    }
    return fragments_res.setHeader(key, value);
  };
};

fn1 = function(identifier, header) {
  return module.exports["fragments_setHeader" + identifier] = function(fragments_res) {
    return function(value) {
      if (arguments.length !== 1) {
        throw new Error('needs exactly one argument');
      }
      return fragments_res.setHeader(header, value);
    };
  };
};
for (identifier in COMMON_RESPONSE_HEADERS) {
  header = COMMON_RESPONSE_HEADERS[identifier];
  fn1(identifier, header);
}

module.exports.fragments_setHeaders = function(fragments_setHeader) {
  return function(headers) {
    var key, results, value;
    if ('object' !== typeof headers) {
      throw new Error('needs one argument which must be an object');
    }
    results = [];
    for (key in headers) {
      if (!hasProp.call(headers, key)) continue;
      value = headers[key];
      results.push(fragments_setHeader(key, value));
    }
    return results;
  };
};

QUICK_CONTENT_TYPES = {
  HTML: 'text/html; charset=utf-8',
  JSON: 'application/json; charset=utf-8',
  XML: 'application/xml; charset=utf-8',
  Text: 'text/plain; charset=utf-8'
};

fn2 = function(identifier, contentType) {
  return module.exports["fragments_setHeaderContentType" + identifier] = function(fragments_setHeaderContentType) {
    return function() {
      return fragments_setHeaderContentType(contentType);
    };
  };
};
for (identifier in QUICK_CONTENT_TYPES) {
  contentType = QUICK_CONTENT_TYPES[identifier];
  fn2(identifier, contentType);
}
