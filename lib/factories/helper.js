// Generated by CoffeeScript 1.10.0
module.exports.fragments_getOpenPort = function(fragments_Promise, fragments_net) {
  var getOpenPort;
  getOpenPort = function(port, tries) {
    if (port == null) {
      port = 8000;
    }
    if (tries == null) {
      tries = 100;
    }
    if (tries < 1) {
      return fragments_Promise.reject(new Error("tries exhausted at port " + port));
    }
    return new fragments_Promise(function(resolve) {
      var server;
      server = fragments_net.createServer();
      server.once('listening', function() {
        server.once('close', function() {
          return resolve(port);
        });
        return server.close();
      });
      server.once('error', function() {
        return resolve(getOpenPort(port + 1, tries - 1));
      });
      return server.listen(port);
    });
  };
  return getOpenPort;
};

module.exports.fragments_comparePasswordToHashed = function(fragments_bcrypt) {
  return function(password, hash) {
    return fragments_bcrypt.compareAsync(password, hash);
  };
};

module.exports.fragments_hashPassword = function(fragments_Promise, fragments_bcrypt, fragments_config_bcryptCost) {
  return function(password) {
    if (password != null) {
      return fragments_bcrypt.genSaltAsync(fragments_config_bcryptCost).then(function(salt) {
        return fragments_bcrypt.hashAsync(password, salt);
      });
    } else {
      return fragments_Promise.resolve(null);
    }
  };
};

module.exports.fragments_setCreatedAt = function(fragments_lodash) {
  return function(record) {
    var defensiveCopy;
    defensiveCopy = fragments_lodash.clone(record);
    defensiveCopy.created_at = new Date;
    return defensiveCopy;
  };
};

module.exports.fragments_setUpdatedAt = function(fragments_lodash) {
  return function(record) {
    var defensiveCopy;
    defensiveCopy = fragments_lodash.clone(record);
    defensiveCopy.updated_at = new Date;
    return defensiveCopy;
  };
};

module.exports.fragments_hashPasswordIfPresent = function(fragments_Promise, fragments_lodash, fragments_hashPassword) {
  return function(record, key) {
    if (key == null) {
      key = 'password';
    }
    if (record[key] != null) {
      return fragments_hashPassword(record[key]).then(function(hashedPassword) {
        var defensiveCopy;
        defensiveCopy = fragments_lodash.clone(record);
        defensiveCopy[key] = hashedPassword;
        return defensiveCopy;
      });
    } else {
      return fragments_Promise.resolve(record);
    }
  };
};
