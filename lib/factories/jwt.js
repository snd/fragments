// Generated by CoffeeScript 1.10.0
module.exports.fragments_jwtRequestProperty = function() {
  return 'token';
};

module.exports.fragments_jwtMiddleware = function(fragments_expressJwt, fragments_jwtRequestProperty, fragments_config_jwtSigningSecret) {
  return fragments_expressJwt({
    secret: fragments_config_jwtSigningSecret,
    requestProperty: fragments_jwtRequestProperty
  });
};

module.exports.fragments_newJwt = function(fragments_jwt, fragments_encryptAesSha256, fragments_config_jwtEncryptionPassword, fragments_config_jwtSigningSecret) {
  return function(payload) {
    var encryptedPayload;
    encryptedPayload = fragments_encryptAesSha256(fragments_config_jwtEncryptionPassword, JSON.stringify(payload));
    return fragments_jwt.sign(encryptedPayload, fragments_config_jwtSigningSecret, {
      expirationInMinutes: 60
    });
  };
};

module.exports.fragments_decryptJwt = function(fragments_decryptAesSha256, fragments_config_jwtEncryptionPassword) {
  return function(encrypted) {
    return fragments_decryptAesSha256(fragments_config_jwtEncryptionPassword, encrypted);
  };
};

module.exports.fragments_token = function(fragments_expressJwt, fragments_req, fragments_res, fragments_jwtMiddleware, fragments_jwtRequestProperty, fragments_decryptJwt, fragments_Promise) {
  if (fragments_req[fragments_jwtRequestProperty] != null) {
    return JSON.parse(fragments_decryptJwt(fragments_req[fragments_jwtRequestProperty]));
  }
  return new fragments_Promise(function(resolve, reject) {
    return fragments_jwtMiddleware(fragments_req, fragments_res, function() {
      if (typeof err !== "undefined" && err !== null) {
        return reject(err);
      }
      if (fragments_req[fragments_jwtRequestProperty] != null) {
        return resolve(JSON.parse(fragments_decryptJwt(fragments_req[fragments_jwtRequestProperty])));
      } else {
        return resolve(null);
      }
    });
  });
};
