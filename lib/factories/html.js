// Generated by CoffeeScript 1.10.0
var CAMELCASED_STATUS_CODES,
  slice = [].slice;

CAMELCASED_STATUS_CODES = require('../status-codes');

module.exports.fragments_kupToHtml = function(fragments_kup) {
  return function(f) {
    var k;
    k = new fragments_kup;
    f(k);
    return k.htmlOut;
  };
};

module.exports.fragments_reactKupToHtml = function(fragments_react, fragments_reactComponentToHtml) {
  return function(f) {
    return fragments_react.renderToStaticMarkup(fragments_react.kup(f));
  };
};

module.exports.fragments_reactToHtml = function(fragments_react) {
  return function() {
    var element, elementOrComponent, rest;
    elementOrComponent = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    element = fragments_react.isValidElement(elementOrComponent) ? elementOrComponent : fragments_react.createElement.apply(fragments_react, [elementOrComponent].concat(slice.call(rest)));
    return fragments_react.renderToStaticMarkup(element);
  };
};

module.exports.fragments_endHTML = function(fragments_setHeaderContentTypeHTML, fragments_end) {
  return function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    fragments_setHeaderContentTypeHTML();
    return fragments_end.apply(null, args);
  };
};

module.exports.fragments_endReact = function(fragments_reactToHtml, fragments_endHTML) {
  return function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return fragments_endHTML(fragments_reactToHtml.apply(null, args));
  };
};

module.exports.fragments_k = function(fragments_next, fragments_kup) {
  return new fragments_kup;
};

module.exports.fragments_;

module.exports.fragments_endKup = function(fragments_endHTML, fragments_k) {
  return function() {
    return fragments_endHTML(fragments_k.htmlOut);
  };
};

module.exports.fragments_endReactWithLayout = function(fragments_k, fragments_endKup) {
  return function() {
    var layoutFunc, rest;
    layoutFunc = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    layoutFunc(function() {
      return fragments_k.react.apply(fragments_k, rest);
    });
    return fragments_endKup();
  };
};

['Kup', 'ReactWithLayout'].forEach(function(content) {
  var camelcasedName, results, statusCode;
  results = [];
  for (statusCode in CAMELCASED_STATUS_CODES) {
    camelcasedName = CAMELCASED_STATUS_CODES[statusCode];
    results.push((function(statusCode, camelcasedName) {
      var factory;
      factory = function(fragments_setStatus, endX) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          fragments_setStatus(statusCode);
          return endX.apply(null, args);
        };
      };
      factory.__inject = ['fragments_setStatus', "fragments_end" + content];
      module.exports["fragments_end" + statusCode + content] = factory;
      return module.exports["fragments_end" + camelcasedName + content] = factory;
    })(statusCode, camelcasedName));
  }
  return results;
});
